# -*- coding: utf-8 -*-
"""소비자동향변화(20210402_1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10H7jnB43isbBNgidr75mfCjaQN1FPn1q

# 사전 세팅
"""

# 구글드라이브 연동
from google.colab import drive
drive.mount('/gdrive', force_remount=True)

# 구글 드라이브 파일 확인
!ls '/gdrive/My Drive/likelion_CoronaCosumePattern_project1/data/'

# 반복되는 드라이브 경로 변수화
drive_path = '/gdrive/My Drive/likelion_CoronaCosumePattern_project1/data/'

# Commented out IPython magic to ensure Python compatibility.
# 한글 폰트 적용
!apt -qq -y install fonts-nanum
 
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
 
fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'
font = fm.FontProperties(fname=fontpath, size=10)
fm._rebuild()
 
# 그래프에 retina display 적용
# %config InlineBackend.figure_format = 'retina'
 
# Colab 의 한글 폰트 설정
plt.rc('font', family='NanumBarunGothic')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from pandas import DataFrame, Series
from numpy.random import randn
# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'

"""# 사용 데이터
 * 한국문화관광연구원_소비자동향지수 현황(지출항목별 CSI).csv

 * 한국문화관광연구원_소비자동향지수 전망(지출항목별 CSI).csv

 * new_cases_by_quater.csv

 * South Korea Vaccinations.csv

##1. 한국문화관광연구원_소비자동향지수 현황(지출항목별 CSI)
"""

temp_consumer_df = pd.read_csv('/gdrive/MyDrive/likelion_CoronaCosumePattern_project1/data/ 한국문화관광연구원_소비자동향지수 현황(지출항목별 CSI).csv', encoding='utf-16', delimiter='\t', index_col='세부항목')
display(temp_consumer_df.info())
display(temp_consumer_df.head())

"""### 1-1 각 항목 별로 분류 
* 가구주연령 : family_age_df

* 가구원 수 : family_num_df

* 월평균 가구 소득 : family_income_df

* 세부항목 : 오프라인 비용(off_), 해외 여행비(off_trip), 온라인 비용(on_), 오락용품 구입비(on_paly)
"""

# 가구주 연령별
family_age_df = temp_consumer_df[temp_consumer_df['항목'] == '가구주연령']  # 가구주 연령으로 분류

family_age_off_df = family_age_df[family_age_df['분류'] == '오프라인 문화생활비'] # 가구주 연령 중 오프라인 문화생활비만 추출
family_age_off_df = family_age_off_df.iloc[0:, 2:14]
display(family_age_off_df)

family_age_off_trip_df = family_age_df[family_age_df['분류'] == '해외 여행비'] # 가구주 연령 중 해외 여행비만 추출
family_age_off_trip_df = family_age_off_trip_df.iloc[0:, 2:14]
display(family_age_off_trip_df)

family_age_on_df = family_age_df[family_age_df['분류'] == '온라인 문화생활비']  # 가구주 연령 중  온라인 문화생활비만 추출
family_age_on_df = family_age_on_df.iloc[0:, 2:14]
display(family_age_on_df)

family_age_on_play_df = family_age_df[family_age_df['분류'] == '오락용품 구입비']  # 가구주 연령 중  오락용품 구입비만 추출
family_age_on_play_df = family_age_on_play_df.iloc[0:, 2:14]
display(family_age_on_play_df)


# 가구원 수
family_num_df = temp_consumer_df[temp_consumer_df['항목'] == '가구원 수']

family_num_off_df = family_num_df[family_num_df['분류'] == '오프라인 문화생활비'] # 가구원 수 중 오프라인 문화생활비만 추출
family_num_off_df = family_num_off_df.iloc[0:, 2:14]
display(family_num_off_df)

family_num_off_trip_df = family_num_df[family_num_df['분류'] == '해외 여행비'] # 가구원 수 중 해외 여행비만 추출
family_num_off_trip_df = family_num_off_trip_df.iloc[0:, 2:14]
display(family_num_off_trip_df)

family_num_on_df = family_num_df[family_num_df['분류'] == '온라인 문화생활비']  # 가구원 수 중 온라인 문화생활비만 추출
family_num_on_df = family_num_on_df.iloc[0:, 2:14]
display(family_num_on_df)

family_num_on_play_df = family_num_df[family_num_df['분류'] == '오락용품 구입비']  # 가구원 수 중 오락용품 구입비만 추출
family_num_on_play_df = family_num_on_play_df.iloc[0:, 2:14]
display(family_num_on_play_df)


# 월평균 가구 소득
family_income_df = temp_consumer_df[temp_consumer_df['항목'] == '월평균 가구 소득']
family_income_df.fillna(method='ffill', inplace=True)

family_income_off_df = family_income_df[family_income_df['분류'] == '오프라인 문화생활비'] # 월평균 가구 소득중 오프라인 문화생활비만 추출
family_income_off_df = family_income_off_df.iloc[0:, 2:14]
display(family_income_off_df)

family_income_off_trip_df = family_income_df[family_income_df['분류'] == '해외 여행비'] # 월평균 가구 소득중 해외 여행비만 추출
family_income_off_trip_df = family_income_off_trip_df.iloc[0:, 2:14]
display(family_income_off_trip_df)

family_income_on_df = family_income_df[family_income_df['분류'] == '온라인 문화생활비']  # 월평균 가구 소득중  온라인 문화생활비만 추출
family_income_on_df = family_income_on_df.iloc[0:, 2:14]
display(family_income_on_df)

family_income_on_play_df = family_income_df[family_income_df['분류'] == '오락용품 구입비']  # 월평균 가구 소득중  오락용품 구입비만 추출
family_income_on_play_df = family_income_on_play_df.iloc[0:, 2:14]
display(family_income_on_play_df)

"""### 1-2 각 항목 별로 시각화
* 가구주연령 : family_age_df

* 가구원 수 : family_num_df

* 월평균 가구 소득 : family_income_df

* 세부항목 : 오프라인 비용(off_), 해외 여행비(off_trip), 온라인 비용(on_), 오락용품 구입비(on_paly)
"""

import seaborn as sns
# 시각화 여러개 나오게 하기

figure, ((ax1,ax2,ax3, ax4), (ax5,ax6,ax7,ax8) , (ax9,ax10,ax11,ax12)) = plt.subplots(nrows = 3, ncols =4 )
figure.set_size_inches(70,30)

# 가구주연령별
ax1.set_title('가구주연령별(오프라인비용)', fontsize=20)
sns.lineplot(data = family_age_off_df.T, marker='o', linewidth=3, ax= ax1)
ax1.set_ylabel('CSI', fontsize=14)
ax1.set_xlabel('Date', fontsize=14)

ax2.set_title('가구주연령별(해외 여행비)', fontsize=20)
sns.lineplot(data = family_age_off_trip_df.T, marker='o', linewidth=3, ax= ax2)
ax2.set_ylabel('CSI', fontsize=14)
ax2.set_xlabel('Date', fontsize=14)

ax3.set_title('가구주연령별(온라인비용)', fontsize=20)
sns.lineplot(data = family_age_on_df.T, marker='o', linewidth=3, ax= ax3)
ax3.set_ylabel('CSI', fontsize=14)
ax3.set_xlabel('Date', fontsize=14)

ax4.set_title('가구주연령별(오락용품 구입비)', fontsize=20)
sns.lineplot(data = family_age_on_play_df.T, marker='o', linewidth=3, ax= ax4)
ax4.set_ylabel('CSI', fontsize=14)
ax4.set_xlabel('Date', fontsize=14)

# 가구원 수별

ax5.set_title('가구원 수(오프라인비용)', fontsize=20)
sns.lineplot(data = family_num_off_df.T, marker='o', linewidth=3, ax= ax5)
ax5.set_ylabel('CSI', fontsize=14)
ax5.set_xlabel('Date', fontsize=14)

ax6.set_title('가구원 수(해외 여행비)', fontsize=20)
sns.lineplot(data = family_num_off_trip_df.T, marker='o', linewidth=3, ax= ax6)
ax6.set_ylabel('CSI', fontsize=14)
ax6.set_xlabel('Date', fontsize=14)

ax7.set_title('가구원 수(온라인비용)', fontsize=20)
sns.lineplot(data = family_num_on_df.T, marker='o', linewidth=3, ax= ax7)
ax7.set_ylabel('CSI', fontsize=14)
ax7.set_xlabel('Date', fontsize=14)

ax8.set_title('가구원 수(오락용품 구입비)', fontsize=20)
sns.lineplot(data = family_num_on_play_df.T, marker='o', linewidth=3, ax= ax8)
ax8.set_ylabel('CSI', fontsize=14)
ax8.set_xlabel('Date', fontsize=14)

# 월평균 가구 소득

ax9.set_title('월평균 가구 소득(오프라인비용)', fontsize=20)
sns.lineplot(data = family_income_off_df.T, marker='o', linewidth=3, ax= ax9)
ax9.set_ylabel('CSI', fontsize=14)
ax9.set_xlabel('Date', fontsize=14)

ax10.set_title('월평균 가구 소득(해외 여행비)', fontsize=20)
sns.lineplot(data = family_income_off_trip_df.T, marker='o', linewidth=3, ax= ax10)
ax10.set_ylabel('CSI', fontsize=14)
ax10.set_xlabel('Date', fontsize=14)

ax11.set_title('월평균 가구 소득(온라인비용)', fontsize=20)
sns.lineplot(data = family_income_on_df.T, marker='o', linewidth=3, ax= ax11)
ax11.set_ylabel('CSI', fontsize=14)
ax11.set_xlabel('Date', fontsize=14)

ax12.set_title('월평균 가구 소득(오락용품 구입비)', fontsize=20)
sns.lineplot(data = family_income_on_play_df.T, marker='o', linewidth=3, ax= ax12)
ax12.set_ylabel('CSI', fontsize=14)
ax12.set_xlabel('Date', fontsize=14)

"""### 1-3 각 항목 별 히트맵
가구주연령 : family_age_df

가구원 수 : family_num_df

월평균 가구 소득 : family_income_df

세부항목 : 오프라인 비용(off_), 해외 여행비(off_trip), 온라인 비용(on_), 오락용품 구입비(on_paly)
"""

# 가구주연령별
df = family_age_off_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(오프라인비용)')

df = family_age_off_trip_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(해외 여행비)')

df = family_age_on_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(온라인비용)')

df = family_age_on_play_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(오락용품 구입비)')

# 가구원 수별

df = family_num_off_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구원 수(오프라인비용)')

df = family_num_off_trip_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(오프라인비용)')

df = family_num_on_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구원 수(온라인비용)')

df = family_num_on_play_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구원 수(오락용품 구입비)')

# 월평균 가구 소득

df = family_income_off_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(오프라인비용)')

df = family_income_off_trip_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('월평균 가구 소득(오프라인비용)')

df = family_income_on_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('월평균 가구 소득(온라인비용)')

df = family_income_on_play_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('월평균 가구 소득(오락용품 구입비)')

"""## 2. 한국문화관광연구원_소비자동향지수 전망(지출항목별 CSI)"""

future_consumer_df = pd.read_csv('/gdrive/MyDrive/likelion_CoronaCosumePattern_project1/data/한국문화관광연구원_소비자동향지수 전망(지출항목별 CSI).csv', encoding='utf-16', delimiter='\t', index_col='세부항목')
display(temp_consumer_df.info())
display(temp_consumer_df.head())

"""### 2-1 각 항목 별로 분류
* 가구주연령 : future_family_age_df

* 가구원 수 : future_family_num_df

* 월평균 가구 소득 : future_family_income_df

* 세부항목 : 오프라인 비용(off_), 해외 여행비(off_trip), 온라인 비용(on_), 오락용품 구입비(on_paly)
"""

# 가구주 연령별
future_family_age_df = future_consumer_df[future_consumer_df['항목'] == '가구주연령']  # 가구주 연령으로 분류

future_family_age_off_df = future_family_age_df[future_family_age_df['분류'] == '오프라인 문화생활비'] # 가구주 연령 중 오프라인 문화생활비만 추출
future_family_age_off_df = future_family_age_off_df.iloc[0:, 2:15]
display(future_family_age_off_df)

future_family_age_off_trip_df = future_family_age_df[future_family_age_df['분류'] == '해외 여행비'] # 가구주 연령 중 해외 여행비만 추출
future_family_age_off_trip_df = future_family_age_off_trip_df.iloc[0:, 2:15]
display(future_family_age_off_trip_df)

future_family_age_on_df = future_family_age_df[future_family_age_df['분류'] == '온라인 문화생활비']  # 가구주 연령 중  온라인 문화생활비만 추출
future_family_age_on_df = future_family_age_on_df.iloc[0:, 2:15]
display(future_family_age_on_df)

future_family_age_on_play_df = future_family_age_df[future_family_age_df['분류'] == '오락용품 구입비']  # 가구주 연령 중  오락용품 구입비만 추출
future_family_age_on_play_df = future_family_age_on_play_df.iloc[0:, 2:15]
display(future_family_age_on_play_df)


# 가구원 수
future_family_num_df = future_consumer_df[future_consumer_df['항목'] == '가구원 수']

future_family_num_off_df = future_family_num_df[future_family_num_df['분류'] == '오프라인 문화생활비'] # 가구원 수 중 오프라인 문화생활비만 추출
future_family_num_off_df = future_family_num_off_df.iloc[0:, 2:15]
display(future_family_num_off_df)

future_family_num_off_trip_df = future_family_num_df[future_family_num_df['분류'] == '해외 여행비'] # 가구원 수 중 해외 여행비만 추출
future_family_num_off_trip_df = future_family_num_off_trip_df.iloc[0:, 2:15]
display(future_family_num_off_trip_df)

future_family_num_on_df = future_family_num_df[future_family_num_df['분류'] == '온라인 문화생활비']  # 가구원 수 중 온라인 문화생활비만 추출
future_family_num_on_df = future_family_num_on_df.iloc[0:, 2:15]
display(future_family_num_on_df)

future_family_num_on_play_df = future_family_num_df[future_family_num_df['분류'] == '오락용품 구입비']  # 가구원 수 중 오락용품 구입비만 추출
future_family_num_on_play_df = future_family_num_on_play_df.iloc[0:, 2:15]
display(future_family_num_on_play_df)


# 월평균 가구 소득
future_family_income_df = future_consumer_df[future_consumer_df['항목'] == '월평균 가구 소득']
future_family_income_df.fillna(method='ffill', inplace=True)

future_family_income_off_df = future_family_income_df[future_family_income_df['분류'] == '오프라인 문화생활비'] # 월평균 가구 소득중 오프라인 문화생활비만 추출
future_family_income_off_df = future_family_income_off_df.iloc[0:, 2:15]
display(future_family_income_off_df)

future_family_income_off_trip_df = future_family_income_df[future_family_income_df['분류'] == '해외 여행비'] # 월평균 가구 소득중 해외 여행비만 추출
future_family_income_off_trip_df = future_family_income_off_trip_df.iloc[0:, 2:15]
display(future_family_income_off_trip_df)

future_family_income_on_df = future_family_income_df[future_family_income_df['분류'] == '온라인 문화생활비']  # 월평균 가구 소득중  온라인 문화생활비만 추출
future_family_income_on_df = future_family_income_on_df.iloc[0:, 2:15]
display(future_family_income_on_df)

future_family_income_on_play_df = future_family_income_df[future_family_income_df['분류'] == '오락용품 구입비']  # 월평균 가구 소득중  오락용품 구입비만 추출
future_family_income_on_play_df = future_family_income_on_play_df.iloc[0:, 2:15]
display(future_family_income_on_play_df)

"""### 2-2 각 항목 별로 시각화

* 가구주연령 : future_family_age_df

* 가구원 수 : future_family_num_df

* 월평균 가구 소득 : future_family_income_df

* 세부항목 : 오프라인 비용(off_), 해외 여행비(off_trip), 온라인 비용(on_), 오락용품 구입비(on_paly)
"""

import seaborn as sns
# 시각화 여러개 나오게 하기

figure, ((ax1,ax2,ax3, ax4), (ax5,ax6,ax7,ax8) , (ax9,ax10,ax11,ax12)) = plt.subplots(nrows = 3, ncols =4 )
figure.set_size_inches(70,30)

# 가구주연령별
ax1.set_title('가구주연령별(오프라인비용)', fontsize=20)
sns.lineplot(data = future_family_age_off_df.T, marker='o', linewidth=3, ax= ax1)
ax1.set_ylabel('CSI', fontsize=14)
ax1.set_xlabel('Date', fontsize=14)

ax2.set_title('가구주연령별(해외 여행비)', fontsize=20)
sns.lineplot(data = future_family_age_off_trip_df.T, marker='o', linewidth=3, ax= ax2)
ax2.set_ylabel('CSI', fontsize=14)
ax2.set_xlabel('Date', fontsize=14)

ax3.set_title('가구주연령별(온라인비용)', fontsize=20)
sns.lineplot(data = future_family_age_on_df.T, marker='o', linewidth=3, ax= ax3)
ax3.set_ylabel('CSI', fontsize=14)
ax3.set_xlabel('Date', fontsize=14)

ax4.set_title('가구주연령별(오락용품 구입비)', fontsize=20)
sns.lineplot(data = future_family_age_on_play_df.T, marker='o', linewidth=3, ax= ax4)
ax4.set_ylabel('CSI', fontsize=14)
ax4.set_xlabel('Date', fontsize=14)

# 가구원 수별

ax5.set_title('가구원 수(오프라인비용)', fontsize=20)
sns.lineplot(data = future_family_num_off_df.T, marker='o', linewidth=3, ax= ax5)
ax5.set_ylabel('CSI', fontsize=14)
ax5.set_xlabel('Date', fontsize=14)

ax6.set_title('가구원 수(해외 여행비)', fontsize=20)
sns.lineplot(data = future_family_num_off_trip_df.T, marker='o', linewidth=3, ax= ax6)
ax6.set_ylabel('CSI', fontsize=14)
ax6.set_xlabel('Date', fontsize=14)

ax7.set_title('가구원 수(온라인비용)', fontsize=20)
sns.lineplot(data = future_family_num_on_df.T, marker='o', linewidth=3, ax= ax7)
ax7.set_ylabel('CSI', fontsize=14)
ax7.set_xlabel('Date', fontsize=14)

ax8.set_title('가구원 수(오락용품 구입비)', fontsize=20)
sns.lineplot(data = future_family_num_on_play_df.T, marker='o', linewidth=3, ax= ax8)
ax8.set_ylabel('CSI', fontsize=14)
ax8.set_xlabel('Date', fontsize=14)

# 월평균 가구 소득

ax9.set_title('월평균 가구 소득(오프라인비용)', fontsize=20)
sns.lineplot(data = future_family_income_off_df.T, marker='o', linewidth=3, ax= ax9)
ax9.set_ylabel('CSI', fontsize=14)
ax9.set_xlabel('Date', fontsize=14)

ax10.set_title('월평균 가구 소득(해외 여행비)', fontsize=20)
sns.lineplot(data = future_family_income_off_trip_df.T, marker='o', linewidth=3, ax= ax10)
ax10.set_ylabel('CSI', fontsize=14)
ax10.set_xlabel('Date', fontsize=14)

ax11.set_title('월평균 가구 소득(온라인비용)', fontsize=20)
sns.lineplot(data = future_family_income_on_df.T, marker='o', linewidth=3, ax= ax11)
ax11.set_ylabel('CSI', fontsize=14)
ax11.set_xlabel('Date', fontsize=14)

ax12.set_title('월평균 가구 소득(오락용품 구입비)', fontsize=20)
sns.lineplot(data = future_family_income_on_play_df.T, marker='o', linewidth=3, ax= ax12)
ax12.set_ylabel('CSI', fontsize=14)
ax12.set_xlabel('Date', fontsize=14)
plt.legend(loc='best')

"""### 2-3 각 항목 별 히트맵

* 가구주연령 : future_family_age_df

* 가구원 수 : future_family_num_df

* 월평균 가구 소득 : future_family_income_df

* 세부항목 : 오프라인 비용(off_), 해외 여행비(off_trip), 온라인 비용(on_), 오락용품 구입비(on_paly)
"""

# 가구주연령별
df = future_family_age_off_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(오프라인비용)')

df = future_family_age_off_trip_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(해외 여행비)')

df = future_family_age_on_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(온라인비용)')

df = future_family_age_on_play_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(오락용품 구입비)')

# 가구원 수별

df = future_family_num_off_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구원 수(오프라인비용)')

df = future_family_num_off_trip_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(오프라인비용)')

df = future_family_num_on_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구원 수(온라인비용)')

df = future_family_num_on_play_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구원 수(오락용품 구입비)')

# 월평균 가구 소득

df = future_family_income_off_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('가구주연령별(오프라인비용)')

df = future_family_income_off_trip_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('월평균 가구 소득(오프라인비용)')

df = future_family_income_on_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('월평균 가구 소득(온라인비용)')

df = future_family_income_on_play_df.T.corr()
sns.clustermap(df, 
               annot = True,      # 실제 값 화면에 나타내기
               cmap = 'RdYlBu_r',  # Red, Yellow, Blue 색상으로 표시
               vmin = -1, vmax = 1, #컬러차트 -1 ~ 1 범위로 표시
              ).fig.suptitle('월평균 가구 소득(오락용품 구입비)')

"""## 3. 분기별 코로나 확진자 수"""

q_corona_df = pd.read_csv('/gdrive/MyDrive/likelion_CoronaCosumePattern_project1/data/new_cases_by_quater.csv', index_col='0')
q_corona_df.columns = ['순서', '확진자 수']
q_corona_df.index.names = ['분기']

q = q_corona_df['확진자 수']
nind = []
for ind in q_corona_df.index:
    ind = ind.split('_')
    print(ind)
    nind.append(ind[0]+'년 0'+ind[1]+'분기')
q_corona_df.index = nind
q_corona_df = q_corona_df.sort_values(by = '순서', ascending=False)
display(q_corona_df.info())
display(q_corona_df)

"""### 3-1 분기별 코로나 확진자 시각화"""

import seaborn as sns

dfx1 = q_corona_df['확진자 수']

dfx2 = future_family_age_off_df.iloc[0:, 0:5].T  # 가구주 연령 중 오프라인 문화생활비만 추출

fig, dx1 = plt.subplots() # 빈플롯과 그 설정 fig를 선언
fig.set_size_inches((10,8))
dx2 = dx1.twinx()   # dx1을 복사해서 dx2에 넣기(빈 subplot)
dx1.set_title("분기별 가구주 연령(오프라인 문화생활)와 분기별 코로나 확진자 수 대조 그래프")
dx1.set_ylabel('확진자수')
dx2.set_ylabel('오프라인나이별지수')

dfx1.plot(kind='line',color='blue',marker = '^',ax=dx1, linewidth=4.0) #dfx1 그래프 그리고 dx1 빈 플롯에 넣기
dfx2.plot(kind='line',color='green',marker = 'o',ax=dx2) #dfx2 그래프 그리고 dx2 빈 플롯에 넣기
plt.show()


dfx1 = q_corona_df['확진자 수']
dfx3 = future_family_age_on_df.iloc[0:, 2:7].T  # 가구주 연령 중 온라인 문화생활비만 추출


fig, dx1 = plt.subplots()
fig.set_size_inches((10,8))
dx1.set_title("분기별 가구주 연령(온라인 문화생활)와 분기별 코로나 확진자 수 대조 그래프")
dx2 = dx1.twinx()

dx1.set_ylabel('확진자수')
dx2.set_ylabel('온라인나이별지수')

width=0.4
dfx1.plot(kind='line',color='blue',marker = '^',ax=dx1,linewidth=4.0)
dfx3.plot(kind='line',color='green',marker = 'o', ax=dx2)
plt.show()

"""##4. 한국의 백신 현황"""

vc_corona_df = pd.read_csv('/gdrive/MyDrive/likelion_CoronaCosumePattern_project1/data/South Korea Vaccinations.csv', index_col='date')

display(vc_corona_df.info())
display(vc_corona_df)

"""### 4-1 백신 총량, 1차, 2차 접종 인원 시각화 """

vced_corona_df = vc_corona_df[['total_vaccinations','people_vaccinated','people_fully_vaccinated']]

display(vced_corona_df)
# Dodged Bar Chart
vced_corona_df.plot(kind = 'bar', figsize=(30,8))

plt.show()

#sns.lineplot(data = vced_corona_df)

"""### 4-2 백신 확보 현황 시각화 """

import seaborn as sns
get_vc_df = vc_corona_df[['total_vaccinations', 'vaccine']]
display(get_vc_df)
plt.figure(figsize=(40,10))
plt.title('백신')
sns.lineplot(x = get_vc_df.index , y = 'total_vaccinations' ,data = get_vc_df, hue = 'vaccine')